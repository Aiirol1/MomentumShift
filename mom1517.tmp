[gd_scene load_steps=7 format=3 uid="uid://cjim5aniugmvh"]

[ext_resource type="PackedScene" uid="uid://cobtdqu0kwfbs" path="res://Scenes/player.tscn" id="1_cko0r"]
[ext_resource type="Script" path="res://Scripts/floor.gd" id="2_iguiu"]
[ext_resource type="Texture2D" uid="uid://dmbq3wlo18vfh" path="res://Assets/Floor.png" id="4_xagkb"]

[sub_resource type="GDScript" id="GDScript_tjnxv"]
script/source = "extends Node2D

@onready var _floor = $Floor

func _ready():
	spawnFloor()


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta):
	pass


func spawnFloor():
	var randomNumber: RandomNumberGenerator = RandomNumberGenerator.new()
	var heightSize = randomNumber.randi_range(20, 30)
	var widthSize = randomNumber.randi_range(20, 30)
	
	for width in widthSize:
		for height in heightSize:
			var randomAtlasValueX = randomNumber.randi_range(0, 1)
			var randomAtlasValueY = randomNumber.randi_range(0, 1)
			
			var coords: Vector2 = Vector2(width, height)
			var atlasCoords: Vector2 = Vector2(randomAtlasValueX, randomAtlasValueY)
			if isAtLine(height, width, heightSize, widthSize, 0):
				if canDraw(2):
					_floor.set_cell(coords, 1, atlasCoords)
			elif isAtLine(height, width, heightSize, widthSize, 1) and hasTileOnTop(_floor, coords):
				if canDraw(1) :
					_floor.set_cell(coords, 1, atlasCoords)
			else:
				_floor.set_cell(coords, 1, atlasCoords)

func canDraw(maxRange: int) -> bool:
	var _canDraw: RandomNumberGenerator = RandomNumberGenerator.new()
	var _draw = _canDraw.randi_range(0, maxRange)
	
	return _draw == 0

func isAtLine(height: int, width: int, heightSize: int, widthSize: int, lineNumber: int) -> bool:
	var lineNumberEnd = lineNumber + 1
	
	return (height == lineNumber or width == lineNumber) or (height == heightSize - lineNumberEnd or width == widthSize - lineNumberEnd)
	
func hasTileOnTop(tileMap: TileMapLayer, tileCoords: Vector2) -> bool:
	var usedCells = tileMap.get_used_cells()
	
	return usedCells.has(Vector2i(tileCoords.x, tileCoords.y - 1)) 
	
func hasTileOnSide(tileMap: TileMapLayer, tileCoords: Vector2) -> bool:
	var usedCells = tileMap.get_used_cells()
	
	return usedCells.has(tileCoords.x + 1) or usedCells.has(tileCoords.x - 1)
"

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_1ygcb"]
texture = ExtResource("4_xagkb")
texture_region_size = Vector2i(32, 32)
0:0/0 = 0
1:0/0 = 0
1:1/0 = 0
0:1/0 = 0

[sub_resource type="TileSet" id="TileSet_o7yvx"]
tile_size = Vector2i(32, 32)
sources/1 = SubResource("TileSetAtlasSource_1ygcb")

[node name="MomentumShift" type="Node2D"]

[node name="TileMaps" type="Node2D" parent="."]
script = SubResource("GDScript_tjnxv")

[node name="Floor" type="TileMapLayer" parent="TileMaps"]
tile_set = SubResource("TileSet_o7yvx")
rendering_quadrant_size = 32
script = ExtResource("2_iguiu")

[node name="GUILayer" type="CanvasLayer" parent="."]

[node name="MomentumBar" type="ProgressBar" parent="GUILayer"]
modulate = Color(0, 0.678431, 1, 1)
offset_right = 152.0
offset_bottom = 27.0
value = 50.0
rounded = true

[node name="FutureMomentumBar" type="ProgressBar" parent="GUILayer"]
offset_right = 152.0
offset_bottom = 27.0
value = 50.0
rounded = true
show_percentage = false

[node name="Player" parent="." node_paths=PackedStringArray("momentumBar", "futureMomentumBar") instance=ExtResource("1_cko0r")]
position = Vector2(155, 134)
momentumBar = NodePath("../GUILayer/MomentumBar")
futureMomentumBar = NodePath("../GUILayer/FutureMomentumBar")

[connection signal="momentumChanged" from="Player" to="Player" method="_on_momentum_changed"]
